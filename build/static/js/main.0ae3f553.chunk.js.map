{"version":3,"sources":["home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","songs","id","title","columns","showTable","user1","user2","showChat","messages","Message","message","overlay","overlayStyle","typedMsg","overlayDiv","React","createRef","getSongs","bind","handleUser1Change","handleUser2Change","setChatState","toggleOverlay","handleMessageChange","sendMessage","e","this","setState","target","value","bodyJson","fetch","method","body","JSON","stringify","headers","then","response","json","i","length","console","log","staticUser1","staticUser2","dataField","text","link","window","open","document","style","overflow","onClick","ref","display","Container","className","color","Form","FormGroup","Input","type","placeholder","onChange","required","Button","backgroundColor","border","outline","login","rowStyle","keyField","data","pagination","paginationFactory","bootstrap4","renderTable","icon","faComment","isTyping","is_typing","hasInputField","showSenderName","bubblesCentered","bubbleStyles","fontSize","chatbubble","borderRadius","padding","recipientChatbubble","width","marginRight","renderChat","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0ae3f553.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Form, FormGroup, Input, Container } from 'reactstrap'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment } from '@fortawesome/free-solid-svg-icons'\nimport { ChatFeed, Message } from 'react-chat-ui'\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            songs: [{ id: 0, title: \"song0\" }, { id: 1, title: \"song1\" }, { id: 2, title: \"song2\" }, { id: 3, title: \"song3\" }, { id: 4, title: \"song4\" }, { id: 5, title: \"song5\" }, { id: 6, title: \"song6\" }, { id: 7, title: \"song7\" }, { id: 8, title: \"song8\" }, { id: 9, title: \"song9\" }, { id: 10, title: \"song10\" }, { id: 11, title: \"song11\" }, { id: 12, title: \"song12\" }, { id: 13, title: \"song13\"}],\n            columns: [],\n            //songs: [],\n            showTable: false,\n            user1: \"\", \n            user2: \"\",\n            showChat: false,\n            messages: [\n                new Message({ id: 1, message: \"I'm the recipient! (The person you're talking to)\" }), \n                new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\n              ],\n            overlay: false,\n            overlayStyle: \"none\", \n            typedMsg: \"\"\n        }\n\n        this.overlayDiv = React.createRef()\n\n        this.getSongs = this.getSongs.bind(this)\n        this.handleUser1Change = this.handleUser1Change.bind(this)\n        this.handleUser2Change = this.handleUser2Change.bind(this)\n        this.setChatState = this.setChatState.bind(this)\n        this.toggleOverlay = this.toggleOverlay.bind(this)\n        this.handleMessageChange = this.handleMessageChange.bind(this)\n        this.sendMessage = this.sendMessage.bind(this)\n    }\n\n\n    // Get form value on change\n    handleUser1Change (e) { this.setState({ user1: e.target.value }) }\n    handleUser2Change (e) { this.setState({ user2: e.target.value }) }\n\n    handleMessageChange (e) { this.setState({ typedMsg: e.target.value }) }\n\n    // Send request to server for songs in common\n    getSongs() {\n        // FOR WHEN SERVER IS SET UP\n        let bodyJson = {user1: this.state.user1, user2: this.state.user2};\n        fetch('/getSongs', {\n            method: 'POST',\n            body: JSON.stringify(bodyJson),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json()).then(json => {\n            for(let i = 0; i < json.length; i++){\n                console.log(json[i]);\n            }\n            let staticUser1 = this.state.user1;\n            let staticUser2 = this.state.user2;\n            this.setState({\n                songs: json,\n                columns: [{ dataField: 'title', text: `Songs in Common Between ${staticUser1} and ${staticUser2}`}],\n                showTable: true,\n                user1: \"\",\n                user2: \"\"\n            })\n        });\n\n        // TEMP FOR FRONT END TESTING\n        // let staticUser1 = this.state.user1\n        // let staticUser2 = this.state.user2\n        // this.setState({\n        //     showTable: true,\n        //     columns: [\n        //         { dataField: 'title', text: `Songs in Common Between ${staticUser1} and ${staticUser2}`,\n        //         headerStyle: { backgroundColor: \"#ffffff\"}\n        //     }\n        //     ],\n        //     user1: \"\",\n        //     user2: \"\"\n        // });\n\n    }\n\n    login() {\n        fetch('/login', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((response) => response.json()).then((link) => {\n            console.log(link['link']);\n            window.open(link['link'], '_blank');\n        });\n    }\n\n    setChatState() {\n        this.setState({\n            showChat: true\n        })\n    }\n\n    toggleOverlay() {\n        if (this.state.overlayStyle === \"block\") {\n            this.setState({ \n                overlayStyle: \"none\",\n                showChat: false \n            });\n            document.body.style.overflow = \"unset\"\n        }\n    }\n\n    // NEED TO WATCH LECTURES FOR THIS PART (i think)\n    sendMessage() {\n        // FOR WHEN SERVER IS SET UP\n        //let bodyJson = {id: this.state.latestId, message: this.state.typedMsg}\n        // fetch('/postMsg', {\n        //     method: 'POST',\n        //     body: JSON.stringify(bodyJson),\n        //     headers: {\n        //         \"Content-Type\": \"application/json\"\n        //     }\n        // }).then(response => response.json())\n        this.setState({ typedMsg: \"\" })\n    }\n\n\n    render () {\n        // Show table on recieving data from server\n        const renderTable = () => {\n            if (this.state.showTable) {\n                return (                \n                <div className=\"mt-5 mb-10\">\n                    <BootstrapTable \n                    rowStyle={{ backgroundColor: '#ffffff' }}\n                    \n                    border={true}\n                    keyField='id' data={ this.state.songs } \n                    columns={ this.state.columns } \n                    pagination={ paginationFactory() } \n                    bootstrap4={true} />\n                </div>\n                )\n            }\n        }\n\n        const renderChat = () => {\n            if (this.state.showChat) {\n                if (this.state.overlayStyle !== \"block\") {\n                    this.setState({ overlayStyle: \"block\" })\n                    document.body.style.overflow = 'hidden'\n                }\n\n                return (\n                    <div id=\"chatDiv\">\n                        \n                        <Container>\n                            <h1 style={{color: \"#191414\"}} className=\"mt-5 mb-10\">Chat</h1>\n                                <ChatFeed\n                                messages={this.state.messages} // Array: list of message objects\n                                isTyping={this.state.is_typing} // Boolean: is the recipient typing\n                                hasInputField={false} // Boolean: use our input, or use your own\n                                showSenderName // show the name of the user who sent the message\n                                bubblesCentered={false} //Boolean should the bubbles be centered in the feed?\n                                bubbleStyles={\n                                {\n                                    text: {\n                                        fontSize: 16\n                                    },\n                                    chatbubble: {\n                                        borderRadius: 70,\n                                        padding: 10,\n                                        backgroundColor: '#1DB954',\n                                    },\n                                    recipientChatbubble: {\n                                        backgroundColor: '#191414',\n                                    },\n                                    }\n                                }\n                                />\n                        </Container>\n\n                        <div id=\"writeMsgDiv\">\n                            <Input type=\"text\" placeholder=\"Type a message\" style={{width: \"80%\", marginRight: \"20px\"}} onChange={this.handleMessageChange} value={this.state.typedMsg} ></Input>\n                            <Button className=\"btn btn-primary\" onClick={this.sendMessage}>Send</Button>\n                        </div>\n\n                    </div>\n                    )\n            }\n        }\n \n\n        return (\n            <div id=\"wrapperDiv\">\n\n                <div id=\"overlay\" onClick={this.toggleOverlay} ref=\"overlayDiv\" style={{display: this.state.overlayStyle}}></div>\n                <Container id=\"mainDiv\" >\n\n                    <h1 className=\"mt-5 mb-10\" style={{color: \"#ffffff\"}}>Unify</h1>\n\n                    <div className=\"mt-5 mb-10\">\n                        <Form>\n                            <FormGroup>\n                                <Input type=\"text\" placeholder=\"login_username else placeholder text\" className=\"form-control\" value={this.state.user1} onChange={this.handleUser1Change} required></Input>\n                            </FormGroup>                    \n                            <FormGroup>\n                                <Input type=\"text\" placeholder=\"Enter another username\" className=\"form-control\"  value={this.state.user2} onChange={this.handleUser2Change}  required></Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Button className=\"btn btn-lg btn-block\" style={{backgroundColor: \"#1DB954\", border: \"none\", outline: \"none\"}} onClick={this.login}>Login</Button>\n                            </FormGroup>\n                            <FormGroup>\n                                <Button className=\"btn btn-lg btn-block\" style={{backgroundColor: \"#1DB954\", border: \"none\", outline: \"none\"}} onClick={this.getSongs}>Compare data</Button>\n                            </FormGroup>\n                        </Form>\n                    </div>\n\n                    { renderTable() }\n\n                    <FontAwesomeIcon icon={faComment} className=\"fas-3x sticky-chat\" onClick={this.setChatState} />\n\n                </Container>\n\n                { renderChat() }\n\n            </div>\n        )\n    }\n\n}\n","import React from 'react';\nimport './App.css';\nimport Home from './home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}