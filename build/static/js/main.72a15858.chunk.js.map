{"version":3,"sources":["home.js","App.js","serviceWorker.js","index.js","spinner.gif"],"names":["ws","W3CWebSocket","Home","props","onButtonClicked","value","send","JSON","stringify","type","msg","document","getElementById","setState","typedMsg","state","songsJSON","user1Songs","user2Songs","columns","songNames","user1Artists","user2Artists","user1Albums","user2Albums","user1Pops","user2Pops","artistImages","showTable","user1","user2","staticUser1","staticUser2","showChat","messages","overlay","overlayStyle","overlayDiv","React","createRef","getSongs","bind","handleUser1Change","handleUser2Change","setChatState","toggleOverlay","handleMessageChange","parseSongs","e","this","target","bodyJson","trackPromise","fetch","method","body","headers","then","response","json","console","log","intersection","dataField","text","i","length","push","id","title","name","artists","popularity","link","window","open","style","overflow","onopen","onmessage","message","dataFromServer","parse","data","concat","Message","Loader","usePromiseTracker","promiseInProgress","src","spinner","alt","width","height","onClick","ref","display","Container","className","color","textAlign","Form","FormGroup","Input","placeholder","onChange","required","Button","backgroundColor","border","outline","login","headerStyle","rowStyle","keyField","pagination","paginationFactory","bootstrap4","renderTable","group1Map","d3","v","d","group2Map","artists1MapAll","group1Keys","Array","from","key","group2Keys","combinedKeys","groupValues","values","item","sum","get","sort","x","y","slice","undefined","artist","image","images","map","url","renderArtists","group1MapAll","fullObj","renderAlbums","pop1Calc","pop2Calc","toFixed","renderPopularity","icon","faComment","isTyping","is_typing","hasInputField","showSenderName","bubblesCentered","bubbleStyles","fontSize","chatbubble","borderRadius","padding","recipientChatbubble","marginRight","renderChat","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.72a15858.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Form, FormGroup, Input, Container } from 'reactstrap'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment } from '@fortawesome/free-solid-svg-icons'\nimport { ChatFeed, Message } from 'react-chat-ui'\nimport * as d3 from 'd3'\nimport spinner from './spinner.gif'\nimport { usePromiseTracker, trackPromise } from 'react-promise-tracker'\nimport WebSocket from 'websocket'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\nconst ws = new W3CWebSocket('ws://localhost:8000');\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            songsJSON: [],\n            user1Songs: [],\n            user2Songs: [],\n            columns: [],\n            songNames: [],\n            user1Artists: [],\n            user2Artists: [],\n            user1Albums: [],\n            user2Albums: [],\n            user1Pops: [],\n            user2Pops: [],\n            artistImages: [],\n            showTable: false,\n            user1: \"\", \n            user2: \"\",\n            staticUser1: \"\", \n            staticUser2: \"\",\n            showChat: false,\n            messages: [\n                \n                \n            ],\n            overlay: false,\n            overlayStyle: \"none\", \n            typedMsg: \"\",\n        }\n\n        this.overlayDiv = React.createRef()\n\n        this.getSongs = this.getSongs.bind(this)\n        this.handleUser1Change = this.handleUser1Change.bind(this)\n        this.handleUser2Change = this.handleUser2Change.bind(this)\n        this.setChatState = this.setChatState.bind(this)\n        this.toggleOverlay = this.toggleOverlay.bind(this)\n        this.handleMessageChange = this.handleMessageChange.bind(this)\n        // this.sendMessage = this.sendMessage.bind(this)\n        this.parseSongs = this.parseSongs.bind(this)\n    }\n\n\n    // Get form value on change\n    handleUser1Change (e) { this.setState({ user1: e.target.value }) }\n    handleUser2Change (e) { this.setState({ user2: e.target.value }) }\n\n    handleMessageChange (e) { this.setState({ typedMsg: e.target.value }) }\n\n    // Send request to server for songs in common\n    getSongs() {\n        // FOR WHEN SERVER IS SET UP\n        let bodyJson = {user1: this.state.user1, user2: this.state.user2};\n        trackPromise(\n        fetch('/getSongs', {\n            method: 'POST',\n            body: JSON.stringify(bodyJson),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json()).then(json => {\n            console.log(json);\n            this.setState({\n                staticUser1: this.state.user1, \n                staticUser2: this.state.user2, \n                songsJSON: json.intersection,\n                columns: [{ dataField: 'title', text: 'Songs'}, { dataField: 'artists', text: 'Artist'}],\n                showTable: true,\n                user1: \"\",\n                user2: \"\", \n                user1Artists: json.user1Artists, \n                user2Artists: json.user2Artists, \n                user1Albums: json.user1Albums, \n                user2Albums: json.user2Albums, \n                user1Songs: json.user1Songs,\n                user2Songs: json.user2Songs, \n                artistImages: json.artistImages\n            })\n            this.parseSongs()\n        })\n        )\n\n    }\n\n    parseSongs() {\n        let songNames = []\n        let user1Pops = []\n        let user2Pops = []\n\n        for (let i = 0; i < this.state.songsJSON.length; i++) {\n            songNames.push({ id: i, title: this.state.songsJSON[i].name, artists: this.state.songsJSON[i].artists[0].name })    \n        }\n\n        for (let i = 0; i < this.state.user1Songs.length; i++) {\n            user1Pops.push( { popularity: this.state.user1Songs[i].popularity } )\n        }\n\n        for (let i = 0; i < this.state.user2Songs.length; i++) {\n            user2Pops.push({ popularity: this.state.user2Songs[i].popularity })\n        }\n\n        this.setState({ \n            songNames: songNames, \n            user1Pops: user1Pops,\n            user2Pops: user2Pops \n        })\n    }\n\n    login() {\n        fetch('/login', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((response) => response.json()).then((link) => {\n            window.open(link['link'], '_blank');\n        });\n    }\n\n    setChatState() {\n        this.setState({\n            showChat: true\n        })\n    }\n\n    toggleOverlay() {\n        if (this.state.overlayStyle === \"block\") {\n            this.setState({ \n                overlayStyle: \"none\",\n                showChat: false \n            });\n            document.body.style.overflow = \"unset\"\n        }\n    }\n\n    // // NEED TO WATCH LECTURES FOR THIS PART (i think)\n    // sendMessage() {\n    //     // FOR WHEN SERVER IS SET UP\n    //     //let bodyJson = {id: this.state.latestId, message: this.state.typedMsg}\n    //     // fetch('/postMsg', {\n    //     //     method: 'POST',\n    //     //     body: JSON.stringify(bodyJson),\n    //     //     headers: {\n    //     //         \"Content-Type\": \"application/json\"\n    //     //     }\n    //     // }).then(response => response.json())\n    //     this.setState({ typedMsg: \"\" })\n    // }\n\n\n        // chat functionality\n        onButtonClicked = (value) => {\n            ws.send(JSON.stringify({\n                type: \"message\",\n                msg: document.getElementById('chatinput').value\n\n            }));\n            this.setState ({\n                typedMsg: \"\"\n            })      \n        }\n\n\n        componentDidMount() {\n\n            ws.onopen = () => {\n                console.log(\"connection to websocket server\");\n        };\n            ws.onmessage = (message) => {\n                const dataFromServer = JSON.parse(message.data);\n                console.log(\"got reply!\", dataFromServer);\n                if(dataFromServer.type === \"message\") {\n                    \n                    this.setState((state) =>\n                    ({\n                        messages: this.state.messages.concat([new Message({id: 0, message: dataFromServer.msg})])\n                        \n                    })\n                    \n                    );\n                }\n            };\n        }\n\n\n\n\n\n    render () {\n        // Show table on recieving data from server\n        const renderTable = () => {\n            if (this.state.showTable) {\n                return (   \n                    <div>    \n                        <h2 className=\"mt-5 mb-10 user-title\">{this.state.staticUser1} and {this.state.staticUser2}</h2>\n\n                        <div className=\"mt-5 mb-10\">\n                            <h4 className=\"subtitle\">Songs in Common</h4>\n                            <BootstrapTable \n                            headerStyle={{ backgroundColor: '#ffffff' }}\n                            rowStyle={{ backgroundColor: '#ffffff' }}\n                            border={true}\n                            keyField='id' data={ this.state.songNames } \n                            columns={ this.state.columns } \n                            pagination={ paginationFactory() } \n                            bootstrap4={true} />\n                        </div>\n                    </div>  \n                )\n            }\n        }\n\n        const renderChat = () => {\n            if (this.state.showChat) {\n                if (this.state.overlayStyle !== \"block\") {\n                    this.setState({ overlayStyle: \"block\" })\n                    document.body.style.overflow = 'hidden'\n                }\n\n                return (\n                    <div id=\"chatDiv\">\n                        \n                        <Container>\n                            <h1 style={{color: \"#191414\"}} className=\"mt-5 mb-10\">Chat</h1>\n                                <ChatFeed\n                                messages={this.state.messages} // Array: list of message objects\n                                isTyping={this.state.is_typing} // Boolean: is the recipient typing\n                                hasInputField={false} // Boolean: use our input, or use your own\n                                showSenderName // show the name of the user who sent the message\n                                bubblesCentered={false} //Boolean should the bubbles be centered in the feed?\n                                bubbleStyles={\n                                {\n                                    text: {\n                                        fontSize: 16\n                                    },\n                                    chatbubble: {\n                                        borderRadius: 70,\n                                        padding: 10,\n                                        backgroundColor: '#1DB954',\n                                    },\n                                    recipientChatbubble: {\n                                        backgroundColor: '#191414',\n                                    },\n                                    }\n                                }\n                                />\n                        </Container>\n\n                        <div id=\"writeMsgDiv\">\n                            <Input type=\"text\" id=\"chatinput\" placeholder=\"Type a message\" style={{width: \"80%\", marginRight: \"20px\"}} onChange={this.handleMessageChange} value={this.state.typedMsg} ></Input>\n                            <Button className=\"btn btn-primary\" onClick={() => this.onButtonClicked(this.state.messages)}>Send</Button>\n                        </div>\n\n                    </div>\n                    )\n            }\n        }\n\n        const renderArtists = () => {\n            let group1Map = d3.rollup(this.state.user1Artists, v => v.length, d => d.name)\n            let group2Map = d3.rollup(this.state.user2Artists, v => v.length, d => d.name)\n\n            let artists1MapAll = d3.group(this.state.artistImages, d => d.name)\n\n            let group1Keys = []\n            for (let [key, value] of Array.from(group1Map)) {\n                group1Keys.push(key)\n            }\n\n            let group2Keys = []\n            for (let [key, value] of Array.from(group2Map)) {\n                group2Keys.push(key)\n            }\n\n            let combinedKeys = (d3.intersection(group1Keys, group2Keys))\n\n            let groupValues = []\n            for (let item of combinedKeys.values()) {\n                let sum = group1Map.get(item) + group2Map.get(item)\n                groupValues.push({ title: item, sum: sum })\n            }\n\n            groupValues.sort(function(x, y){\n                return d3.descending(x.sum, y.sum);\n            })\n\n            groupValues = groupValues.slice(0, 3)\n            \n            for (let i = 0 ; i < groupValues.length ; i++) {\n                if (groupValues[i] === undefined) { return }\n                let artist = artists1MapAll.get(groupValues[i].title)\n                groupValues[i].image = artist[0].images[1]\n            }\n\n            if (this.state.showTable && groupValues.length > 0) {\n                return (\n                    <Container className=\"mt-5 mb-10 statsWrapper\">\n                        <h4 className=\"subtitle\">Top Artists in Common</h4>\n\n                        <div className=\"statsDiv\">\n                            {groupValues.map(value => (\n                                <div className=\"artistName\">\n                                    <div>\n                                        <img style={{width: \"100%\", height: \"100%\"}} alt=\"artist image\" src={value.image.url}/>\n                                    </div>\n                                    <p className=\"statsTitle\">{value.title}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </Container>\n                )\n            }\n        }\n\n        const renderAlbums = () => {\n            let group1Map = d3.rollup(this.state.user1Albums, v => v.length, d => d.name)\n            let group2Map = d3.rollup(this.state.user2Albums, v => v.length, d => d.name)\n\n            let group1MapAll = d3.group(this.state.user1Albums, d => d.name)\n\n            let group1Keys = []\n            for (let [key, value] of Array.from(group1Map)) {\n                group1Keys.push(key)\n            }\n\n            let group2Keys = []\n            for (let [key, value] of Array.from(group2Map)) {\n                group2Keys.push(key)\n            }\n\n            let combinedKeys = (d3.intersection(group1Keys, group2Keys))\n\n            let groupValues = []\n            for (let item of combinedKeys.values()) {\n                let sum = group1Map.get(item) + group2Map.get(item)\n                groupValues.push({ title: item, sum: sum })\n            }\n\n            groupValues.sort(function(x, y){\n                return d3.descending(x.sum, y.sum);\n            })\n\n            groupValues = groupValues.slice(0, 3)\n\n            for (let i = 0 ; i < groupValues.length ; i++) {\n                if (groupValues[i] === undefined) { return }\n                let fullObj = group1MapAll.get(groupValues[i].title)\n                groupValues[i].artist = fullObj[0].artists.name\n                groupValues[i].image = fullObj[0].images[1]\n            }\n\n            if (this.state.showTable && groupValues.length > 0) {\n                return (\n                    <Container className=\"mt-5 mb-10\">\n                        <h4 className=\"subtitle\">Top Albums in Common</h4>\n\n                        <div className=\"statsDiv\">\n                            {groupValues.map(value => (\n                                // add images too \n                                <div className=\"artistName\">\n                                    <div>\n                                        <img style={{width: \"100%\", height: \"100%\"}} alt=\"album art\" src={value.image.url}/>\n                                    </div>\n                                    <p className=\"statsTitle\">{value.title}</p>\n                                    <p>{value.artist}</p>\n                                </div>\n                            ))}\n                        </div>\n                    </Container>\n                )\n            }\n        }\n        \n        const renderPopularity = () => {\n            let pop1Calc = (d3.mean(this.state.user1Pops, d => d.popularity))\n            let pop2Calc = (d3.mean(this.state.user2Pops, d => d.popularity))\n\n            if (pop1Calc != undefined || pop2Calc != undefined) {\n                pop1Calc = pop1Calc.toFixed(2)\n                pop2Calc = pop2Calc.toFixed(2)\n            }\n\n            if (this.state.showTable) {\n                return (\n                    <Container className=\"mt-5 mb-10\">\n                        <h4 className=\"subtitle\">Average Song Popularity</h4>\n\n                        <div className=\"statsDiv\">\n                            <div className=\"barDiv\">\n                                <div className=\"fullBar\">\n                                    <div className=\"percentBar\" style={{width: `${pop1Calc}%` }}></div>\n                                </div>\n                                <p className=\"statsTitle\" style={{ color: \"#fff\" }}>{this.state.staticUser1}</p>\n                                <p style={{ color: \"#fff\" }}>{ pop1Calc }%</p>\n                            </div>\n\n                            <div className=\"barDiv\">\n                                <div className=\"fullBar\">\n                                    <div className=\"percentBar\" style={{width: `${pop2Calc}%` }}></div>\n                                </div>\n                                <p className=\"statsTitle\" style={{ color: \"#fff\" }}>{this.state.staticUser2}</p>\n                                <p style={{ color: \"#fff\" }}>{ pop2Calc }%</p>\n                            </div>\n\n                        </div> \n                    </Container>\n                )\n            }\n        }\n\n        const Loader = props => {\n            const { promiseInProgress } = usePromiseTracker()\n            return (\n                promiseInProgress &&\n                <img src={spinner} alt=\"loading\" style={{width: \"5rem\", height: \"5rem\"}}/>\n            )\n        }\n \n        return (\n            <div id=\"wrapperDiv\">\n\n                <div id=\"overlay\" onClick={this.toggleOverlay} ref=\"overlayDiv\" style={{display: this.state.overlayStyle}}></div>\n                <Container id=\"mainDiv\" >\n\n                    <h1 className=\"mt-5\" style={{color: \"#ffffff\"}}>Unify</h1>\n                    <p className=\"subtitle\" className=\"mb-10\" style={{ textAlign: \"center\", color: \"#ffffff\" }}>Compare Spotify playlists!</p>\n\n                    <div className=\"mt-5 mb-10\">\n                        <Form>\n                            <FormGroup>\n                                <Input type=\"text\" placeholder=\"Enter your Spotify username\" className=\"form-control\" value={this.state.user1} onChange={this.handleUser1Change} required></Input>\n                            </FormGroup>                    \n                            <FormGroup>\n                                <Input type=\"text\" placeholder=\"Enter another Spotify username\" className=\"form-control\"  value={this.state.user2} onChange={this.handleUser2Change}  required></Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Button className=\"btn btn-lg btn-block\" style={{backgroundColor: \"#1DB954\", border: \"none\", outline: \"none\"}} onClick={this.login}>Login</Button>\n                            </FormGroup>\n                            <FormGroup>\n                                <Button className=\"btn btn-lg btn-block\" style={{backgroundColor: \"#1DB954\", border: \"none\", outline: \"none\"}} onClick={this.getSongs}>Analyze data</Button>\n                            </FormGroup>\n                        </Form>\n                    </div>\n\n                    <Loader />\n\n                    { renderTable() }\n\n                    { renderArtists() }\n\n                    { renderAlbums() }\n\n                    { renderPopularity() }\n\n                    <FontAwesomeIcon icon={faComment} className=\"fas-3x sticky-chat\" onClick={this.setChatState} />\n\n                </Container>\n\n                { renderChat() }\n\n            </div>\n        )\n    }\n\n}\n","import React from 'react'\nimport './App.css'\nimport Home from './home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/spinner.718571f2.gif\";"],"sourceRoot":""}