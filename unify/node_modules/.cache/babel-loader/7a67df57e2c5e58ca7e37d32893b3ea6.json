{"ast":null,"code":"var _jsxFileName = \"/Users/mollywirtz/Documents/Classes/CS 4241 - Webware/FinalProject/final-project/unify/src/home.js\";\nimport React from 'react';\nimport { Button, Form, FormGroup, Input, Container } from 'reactstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComment } from '@fortawesome/free-solid-svg-icons';\nimport { ChatFeed, Message } from 'react-chat-ui';\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      songsJSON: [],\n      columns: [],\n      songs: [],\n      showTable: false,\n      user1: \"\",\n      user2: \"\",\n      showChat: false,\n      messages: [new Message({\n        id: 1,\n        message: \"I'm the recipient! (The person you're talking to)\"\n      }), new Message({\n        id: 0,\n        message: \"I'm you -- the blue bubble!\"\n      })],\n      overlay: false,\n      overlayStyle: \"none\",\n      typedMsg: \"\"\n    };\n    this.overlayDiv = React.createRef();\n    this.getSongs = this.getSongs.bind(this);\n    this.handleUser1Change = this.handleUser1Change.bind(this);\n    this.handleUser2Change = this.handleUser2Change.bind(this);\n    this.setChatState = this.setChatState.bind(this);\n    this.toggleOverlay = this.toggleOverlay.bind(this);\n    this.handleMessageChange = this.handleMessageChange.bind(this);\n    this.sendMessage = this.sendMessage.bind(this);\n    this.parseSongs = this.parseSongs.bind(this);\n  } // Get form value on change\n\n\n  handleUser1Change(e) {\n    this.setState({\n      user1: e.target.value\n    });\n  }\n\n  handleUser2Change(e) {\n    this.setState({\n      user2: e.target.value\n    });\n  }\n\n  handleMessageChange(e) {\n    this.setState({\n      typedMsg: e.target.value\n    });\n  } // Send request to server for songs in common\n\n\n  getSongs() {\n    // FOR WHEN SERVER IS SET UP\n    let bodyJson = {\n      user1: this.state.user1,\n      user2: this.state.user2\n    };\n    fetch('/getSongs', {\n      method: 'POST',\n      body: JSON.stringify(bodyJson),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(json => {\n      for (let i = 0; i < json.length; i++) {\n        console.log(json[i]);\n      }\n\n      let staticUser1 = this.state.user1;\n      let staticUser2 = this.state.user2;\n      this.setState({\n        songsJSON: json,\n        columns: [{\n          dataField: 'title',\n          text: `Songs in Common Between ${staticUser1} and ${staticUser2}`\n        }],\n        showTable: true,\n        user1: \"\",\n        user2: \"\"\n      });\n      this.parseSongs();\n    }); // TEMP FOR FRONT END TESTING\n    // let staticUser1 = this.state.user1\n    // let staticUser2 = this.state.user2\n    // this.setState({\n    //     showTable: true,\n    //     columns: [\n    //         { dataField: 'title', text: `Songs in Common Between ${staticUser1} and ${staticUser2}`,\n    //         headerStyle: { backgroundColor: \"#ffffff\"}\n    //     }\n    //     ],\n    //     user1: \"\",\n    //     user2: \"\"\n    // });\n  }\n\n  parseSongs() {\n    let songNames = [];\n\n    for (let i = 0; i < this.state.songsJSON.length; i++) {\n      songNames.push(this.state.songsJSON[i].name);\n    }\n\n    console.log(songNames);\n  }\n\n  login() {\n    fetch('/login', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(link => {\n      window.open(link['link'], '_blank');\n    });\n  }\n\n  setChatState() {\n    this.setState({\n      showChat: true\n    });\n  }\n\n  toggleOverlay() {\n    if (this.state.overlayStyle === \"block\") {\n      this.setState({\n        overlayStyle: \"none\",\n        showChat: false\n      });\n      document.body.style.overflow = \"unset\";\n    }\n  } // NEED TO WATCH LECTURES FOR THIS PART (i think)\n\n\n  sendMessage() {\n    // FOR WHEN SERVER IS SET UP\n    //let bodyJson = {id: this.state.latestId, message: this.state.typedMsg}\n    // fetch('/postMsg', {\n    //     method: 'POST',\n    //     body: JSON.stringify(bodyJson),\n    //     headers: {\n    //         \"Content-Type\": \"application/json\"\n    //     }\n    // }).then(response => response.json())\n    this.setState({\n      typedMsg: \"\"\n    });\n  }\n\n  render() {\n    // Show table on recieving data from server\n    const renderTable = () => {\n      if (this.state.showTable) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"mt-5 mb-10\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(BootstrapTable, {\n          rowStyle: {\n            backgroundColor: '#ffffff'\n          },\n          border: true,\n          keyField: \"id\",\n          data: this.state.songs,\n          columns: this.state.columns,\n          pagination: paginationFactory(),\n          bootstrap4: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 21\n          }\n        }));\n      }\n    };\n\n    const renderChat = () => {\n      if (this.state.showChat) {\n        if (this.state.overlayStyle !== \"block\") {\n          this.setState({\n            overlayStyle: \"block\"\n          });\n          document.body.style.overflow = 'hidden';\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"chatDiv\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(Container, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          style: {\n            color: \"#191414\"\n          },\n          className: \"mt-5 mb-10\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 29\n          }\n        }, \"Chat\"), /*#__PURE__*/React.createElement(ChatFeed, {\n          messages: this.state.messages // Array: list of message objects\n          ,\n          isTyping: this.state.is_typing // Boolean: is the recipient typing\n          ,\n          hasInputField: false // Boolean: use our input, or use your own\n          ,\n          showSenderName: true // show the name of the user who sent the message\n          ,\n          bubblesCentered: false //Boolean should the bubbles be centered in the feed?\n          ,\n          bubbleStyles: {\n            text: {\n              fontSize: 16\n            },\n            chatbubble: {\n              borderRadius: 70,\n              padding: 10,\n              backgroundColor: '#1DB954'\n            },\n            recipientChatbubble: {\n              backgroundColor: '#191414'\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 33\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          id: \"writeMsgDiv\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Input, {\n          type: \"text\",\n          placeholder: \"Type a message\",\n          style: {\n            width: \"80%\",\n            marginRight: \"20px\"\n          },\n          onChange: this.handleMessageChange,\n          value: this.state.typedMsg,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }\n        }), /*#__PURE__*/React.createElement(Button, {\n          className: \"btn btn-primary\",\n          onClick: this.sendMessage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }\n        }, \"Send\")));\n      }\n    };\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"wrapperDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"overlay\",\n      onClick: this.toggleOverlay,\n      ref: \"overlayDiv\",\n      style: {\n        display: this.state.overlayStyle\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      id: \"mainDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"mt-5 mb-10\",\n      style: {\n        color: \"#ffffff\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 21\n      }\n    }, \"Unify\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-5 mb-10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"login_username else placeholder text\",\n      className: \"form-control\",\n      value: this.state.user1,\n      onChange: this.handleUser1Change,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      placeholder: \"Enter another username\",\n      className: \"form-control\",\n      value: this.state.user2,\n      onChange: this.handleUser2Change,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-lg btn-block\",\n      style: {\n        backgroundColor: \"#1DB954\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      onClick: this.login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 33\n      }\n    }, \"Login\")), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-lg btn-block\",\n      style: {\n        backgroundColor: \"#1DB954\",\n        border: \"none\",\n        outline: \"none\"\n      },\n      onClick: this.getSongs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 33\n      }\n    }, \"Compare data\")))), renderTable(), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComment,\n      className: \"fas-3x sticky-chat\",\n      onClick: this.setChatState,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 21\n      }\n    })), renderChat());\n  }\n\n}","map":{"version":3,"sources":["/Users/mollywirtz/Documents/Classes/CS 4241 - Webware/FinalProject/final-project/unify/src/home.js"],"names":["React","Button","Form","FormGroup","Input","Container","BootstrapTable","paginationFactory","FontAwesomeIcon","faComment","ChatFeed","Message","Home","Component","constructor","props","state","songsJSON","columns","songs","showTable","user1","user2","showChat","messages","id","message","overlay","overlayStyle","typedMsg","overlayDiv","createRef","getSongs","bind","handleUser1Change","handleUser2Change","setChatState","toggleOverlay","handleMessageChange","sendMessage","parseSongs","e","setState","target","value","bodyJson","fetch","method","body","JSON","stringify","headers","then","response","json","i","length","console","log","staticUser1","staticUser2","dataField","text","songNames","push","name","login","link","window","open","document","style","overflow","render","renderTable","backgroundColor","renderChat","color","is_typing","fontSize","chatbubble","borderRadius","padding","recipientChatbubble","width","marginRight","display","border","outline"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Form, FormGroup, Input, Container } from 'reactstrap'\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory from 'react-bootstrap-table2-paginator'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faComment } from '@fortawesome/free-solid-svg-icons'\nimport { ChatFeed, Message } from 'react-chat-ui'\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            songsJSON: [],\n            columns: [],\n            songs: [],\n            showTable: false,\n            user1: \"\", \n            user2: \"\",\n            showChat: false,\n            messages: [\n                new Message({ id: 1, message: \"I'm the recipient! (The person you're talking to)\" }), \n                new Message({ id: 0, message: \"I'm you -- the blue bubble!\" }),\n              ],\n            overlay: false,\n            overlayStyle: \"none\", \n            typedMsg: \"\"\n        }\n\n        this.overlayDiv = React.createRef()\n\n        this.getSongs = this.getSongs.bind(this)\n        this.handleUser1Change = this.handleUser1Change.bind(this)\n        this.handleUser2Change = this.handleUser2Change.bind(this)\n        this.setChatState = this.setChatState.bind(this)\n        this.toggleOverlay = this.toggleOverlay.bind(this)\n        this.handleMessageChange = this.handleMessageChange.bind(this)\n        this.sendMessage = this.sendMessage.bind(this)\n        this.parseSongs = this.parseSongs.bind(this)\n    }\n\n\n    // Get form value on change\n    handleUser1Change (e) { this.setState({ user1: e.target.value }) }\n    handleUser2Change (e) { this.setState({ user2: e.target.value }) }\n\n    handleMessageChange (e) { this.setState({ typedMsg: e.target.value }) }\n\n    // Send request to server for songs in common\n    getSongs() {\n        // FOR WHEN SERVER IS SET UP\n        let bodyJson = {user1: this.state.user1, user2: this.state.user2};\n        fetch('/getSongs', {\n            method: 'POST',\n            body: JSON.stringify(bodyJson),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json()).then(json => {\n            for(let i = 0; i < json.length; i++){\n                console.log(json[i]);\n            }\n            let staticUser1 = this.state.user1;\n            let staticUser2 = this.state.user2;\n            this.setState({\n                songsJSON: json,\n                columns: [{ dataField: 'title', text: `Songs in Common Between ${staticUser1} and ${staticUser2}`}],\n                showTable: true,\n                user1: \"\",\n                user2: \"\"\n            })\n            this.parseSongs()\n        });\n\n        // TEMP FOR FRONT END TESTING\n        // let staticUser1 = this.state.user1\n        // let staticUser2 = this.state.user2\n        // this.setState({\n        //     showTable: true,\n        //     columns: [\n        //         { dataField: 'title', text: `Songs in Common Between ${staticUser1} and ${staticUser2}`,\n        //         headerStyle: { backgroundColor: \"#ffffff\"}\n        //     }\n        //     ],\n        //     user1: \"\",\n        //     user2: \"\"\n        // });\n\n    }\n\n    parseSongs() {\n        let songNames = []\n        for (let i = 0; i < this.state.songsJSON.length; i++){\n            songNames.push(this.state.songsJSON[i].name)\n        }\n        console.log(songNames)\n    }\n\n    login() {\n        fetch('/login', {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then((response) => response.json()).then((link) => {\n            window.open(link['link'], '_blank');\n        });\n    }\n\n    setChatState() {\n        this.setState({\n            showChat: true\n        })\n    }\n\n    toggleOverlay() {\n        if (this.state.overlayStyle === \"block\") {\n            this.setState({ \n                overlayStyle: \"none\",\n                showChat: false \n            });\n            document.body.style.overflow = \"unset\"\n        }\n    }\n\n    // NEED TO WATCH LECTURES FOR THIS PART (i think)\n    sendMessage() {\n        // FOR WHEN SERVER IS SET UP\n        //let bodyJson = {id: this.state.latestId, message: this.state.typedMsg}\n        // fetch('/postMsg', {\n        //     method: 'POST',\n        //     body: JSON.stringify(bodyJson),\n        //     headers: {\n        //         \"Content-Type\": \"application/json\"\n        //     }\n        // }).then(response => response.json())\n        this.setState({ typedMsg: \"\" })\n    }\n\n\n    render () {\n        // Show table on recieving data from server\n        const renderTable = () => {\n            if (this.state.showTable) {\n                return (                \n                <div className=\"mt-5 mb-10\">\n                    <BootstrapTable \n                    rowStyle={{ backgroundColor: '#ffffff' }}\n                    \n                    border={true}\n                    keyField='id' data={ this.state.songs } \n                    columns={ this.state.columns } \n                    pagination={ paginationFactory() } \n                    bootstrap4={true} />\n                </div>\n                )\n            }\n        }\n\n        const renderChat = () => {\n            if (this.state.showChat) {\n                if (this.state.overlayStyle !== \"block\") {\n                    this.setState({ overlayStyle: \"block\" })\n                    document.body.style.overflow = 'hidden'\n                }\n\n                return (\n                    <div id=\"chatDiv\">\n                        \n                        <Container>\n                            <h1 style={{color: \"#191414\"}} className=\"mt-5 mb-10\">Chat</h1>\n                                <ChatFeed\n                                messages={this.state.messages} // Array: list of message objects\n                                isTyping={this.state.is_typing} // Boolean: is the recipient typing\n                                hasInputField={false} // Boolean: use our input, or use your own\n                                showSenderName // show the name of the user who sent the message\n                                bubblesCentered={false} //Boolean should the bubbles be centered in the feed?\n                                bubbleStyles={\n                                {\n                                    text: {\n                                        fontSize: 16\n                                    },\n                                    chatbubble: {\n                                        borderRadius: 70,\n                                        padding: 10,\n                                        backgroundColor: '#1DB954',\n                                    },\n                                    recipientChatbubble: {\n                                        backgroundColor: '#191414',\n                                    },\n                                    }\n                                }\n                                />\n                        </Container>\n\n                        <div id=\"writeMsgDiv\">\n                            <Input type=\"text\" placeholder=\"Type a message\" style={{width: \"80%\", marginRight: \"20px\"}} onChange={this.handleMessageChange} value={this.state.typedMsg} ></Input>\n                            <Button className=\"btn btn-primary\" onClick={this.sendMessage}>Send</Button>\n                        </div>\n\n                    </div>\n                    )\n            }\n        }\n \n\n        return (\n            <div id=\"wrapperDiv\">\n\n                <div id=\"overlay\" onClick={this.toggleOverlay} ref=\"overlayDiv\" style={{display: this.state.overlayStyle}}></div>\n                <Container id=\"mainDiv\" >\n\n                    <h1 className=\"mt-5 mb-10\" style={{color: \"#ffffff\"}}>Unify</h1>\n\n                    <div className=\"mt-5 mb-10\">\n                        <Form>\n                            <FormGroup>\n                                <Input type=\"text\" placeholder=\"login_username else placeholder text\" className=\"form-control\" value={this.state.user1} onChange={this.handleUser1Change} required></Input>\n                            </FormGroup>                    \n                            <FormGroup>\n                                <Input type=\"text\" placeholder=\"Enter another username\" className=\"form-control\"  value={this.state.user2} onChange={this.handleUser2Change}  required></Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Button className=\"btn btn-lg btn-block\" style={{backgroundColor: \"#1DB954\", border: \"none\", outline: \"none\"}} onClick={this.login}>Login</Button>\n                            </FormGroup>\n                            <FormGroup>\n                                <Button className=\"btn btn-lg btn-block\" style={{backgroundColor: \"#1DB954\", border: \"none\", outline: \"none\"}} onClick={this.getSongs}>Compare data</Button>\n                            </FormGroup>\n                        </Form>\n                    </div>\n\n                    { renderTable() }\n\n                    <FontAwesomeIcon icon={faComment} className=\"fas-3x sticky-chat\" onClick={this.setChatState} />\n\n                </Container>\n\n                { renderChat() }\n\n            </div>\n        )\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}